#include <iostream>  
#include <string.h>  
#include <conio.h>  
#define max 100  
using namespace std;  
We will going to include all the necessary library files to avoid any kind of error and pre defining max to be 100.

class Customer  
{  
public:  
    char name[100];  
    char address[100];  
    char phone[12];  
    char from_date[20];  
    char to_date[20];  
    float payment_advance;  
    int booking_id;  
};  
We have created a class for customer having variables like name of size 100, address of size 100, phone of character up to 12, from date of size 20, to_date of size 20, a float payment_advance variable and a booking_id of type int.

class Room  
{  
public:  
    char type;  
    char stype;  
    char ac;  
    int roomNumber;  
    int rent;  
    int status;  
  
    class Customer cust;  
    class Room addRoom(int);  
    void searchRoom(int);  
    void deleteRoom(int);  
    void displayRoom(Room);  
};  
We have declared a class room having the variables like type, stype, ac, roomNumber of type int, rent of type int and status of type int. We have created a object of the customer class cust.

class Room rooms[max];  
int count = 0;  
We have declared rooms[max] of room class as global and count as 0;

Room Room::addRoom(int rno)  
{  
    class Room room;  
    room.roomNumber = rno;  
    cout << "\nType AC/Non-AC (A/N) : ";  
    cin >> room.ac;  
    cout << "\nType Comfort (S/N) : ";  
    cin >> room.type;  
    cout << "\nType Size (B/S) : ";  
    cin >> room.stype;  
    cout << "\nDaily Rent : ";  
    cin >> room.rent;  
    room.status = 0;  
    cout << "\n Room Added Successfully!";  
    getch();  
    return room;  
}  
In the function addroom, an object of class room is created which will be responsible to add the rooms according to customer need and will ask for type AC or NOT then ask for comfort and size of room S or B and daily rent which we will going to set as per need. Rooms added successfully.

void Room::searchRoom(int rno)  
{  
    int i, found = 0;  
    for (i = 0; i < count; i++)  
    {  
        if (rooms[i].roomNumber == rno)  
        {  
            found = 1;  
            break;  
        }  
    }  
    if (found == 1)  
    {  
        cout << "Room Details\n";  
        if (rooms[i].status == 1)  
        {  
            cout << "\nRoom is Reserved";  
        }  
        else  
        {  
            cout << "\nRoom is available";  
        }  
        displayRoom(rooms[i]);  
        getch();  
    }  
    else  
    {  
        cout << "\nRoom not found";  
        getch();  
    }  
}  
This function search room will help in finding existed room if available. The customer will enter the room number, if the room is found it will show the details of the room.

void Room::displayRoom(Room tempRoom)  
{  
    cout << "\nRoom Number: \t" << tempRoom.roomNumber;  
    cout << "\nType AC/Non-AC (A/N) " << tempRoom.ac;  
    cout << "\nType Comfort (S/N) " << tempRoom.type;  
    cout << "\nType Size (B/S) " << tempRoom.stype;  
    cout << "\nRent: " << tempRoom.rent;  
}  
This function will display the rooms only when the customer will enter the room number and chose the type AC or not and comfort and type size etc.

class HotelMgnt : protected Room  
{  
public:  
    void checkIn();  
    void getAvailRoom();  
    void searchCustomer(char *);  
    void checkOut(int);  
    void guestSummaryReport();  
};  
This will going to be the class for hotel management having options like check-in, available rooms, search for a customer, check out and getting the summary report.

void HotelMgnt::guestSummaryReport()  
{  
  
    if (count == 0)  
    {  
        cout << "\n No Guest in Hotel !!";  
    }  
    for (int i = 0; i < count; i++)  
    {  
        if (rooms[i].status == 1)  
        {  
            cout << "\n Customer First Name : " << rooms[i].cust.name;  
            cout << "\n Room Number : " << rooms[i].roomNumber;  
            cout << "\n Address (only city) : " << rooms[i].cust.address;  
            cout << "\n Phone : " << rooms[i].cust.phone;  
            cout << "\n---------------------------------------";  
        }  
    }  
The function above getsummary will get us the summary of a existed customer if present any and we can add the summary as well. It will ask for customer first name, room number, address and phone number.

// hotel management reservation of room  
void HotelMgnt::checkIn()  
{  
    int i, found = 0, rno;  
  
    class Room room;  
    cout << "\nEnter Room number : ";  
    cin >> rno;  
    for (i = 0; i < count; i++)  
    {  
        if (rooms[i].roomNumber == rno)  
        {  
            found = 1;  
            break;  
        }  
    }  
    if (found == 1)  
    {  
        if (rooms[i].status == 1)  
        {  
            cout << "\nRoom is already Booked";  
            getch();  
            return;  
        }  
        cout << "\nEnter booking id: ";  
        cin >> rooms[i].cust.booking_id;  
  
        cout << "\nEnter Customer Name (First Name): ";  
        cin >> rooms[i].cust.name;  
  
        cout << "\nEnter Address (only city): ";  
        cin >> rooms[i].cust.address;  
  
        cout << "\nEnter Phone: ";  
        cin >> rooms[i].cust.phone;  
  
        cout << "\nEnter From Date: ";  
        cin >> rooms[i].cust.from_date;  
  
        cout << "\nEnter to  Date: ";  
        cin >> rooms[i].cust.to_date;  
  
        cout << "\nEnter Advance Payment: ";  
        cin >> rooms[i].cust.payment_advance;  
  
        rooms[i].status = 1;  
  
        cout << "\n Customer Checked-in Successfully..";  
        getch();  
    }  
}  
If a customer wants to make a reservation then this code will come in action. The customer will enter the room number; if that room is booked then system will flag a text showing room is already booked. If the room was not booked the system will ask for booking id, customer name, ask for enter the address, enter the phone number, enter the date you want to take the room and for enter the advance payment. Then the system will flag a text showing Customer checked in successfully.

void HotelMgnt::getAvailRoom()  
{  
    int i, found = 0;  
    for (i = 0; i < count; i++)  
    {  
        if (rooms[i].status == 0)  
        {  
            displayRoom(rooms[i]);  
            cout << "\n\nPress enter for next room";  
            found = 1;  
            getch();  
        }  
    }  
    if (found == 0)  
    {  
        cout << "\nAll rooms are reserved";  
        getch();  
    }  
}  
The above function will show the available rooms, if that room found to be reserved system shows a flag stating that all rooms are reserved.

// hotel management shows all persons that have booked room  
void HotelMgnt::searchCustomer(char *pname)  
{  
    int i, found = 0;  
    for (i = 0; i < count; i++)  
    {  
        if (rooms[i].status == 1 && stricmp(rooms[i].cust.name, pname) == 0)  
        {  
            cout << "\nCustomer Name: " << rooms[i].cust.name;  
            cout << "\nRoom Number: " << rooms[i].roomNumber;  
  
            cout << "\n\nPress enter for next record";  
            found = 1;  
            getch();  
        }  
    }  
    if (found == 0)  
    {  
        cout << "\nPerson not found.";  
        getch();  
    }  
}  
The above peace of code will go to search for a customer. The user will enter the customer name and if the customer doesn't exist it will show person not found.

// hotel managemt generates the bill of the expenses  
void HotelMgnt::checkOut(int roomNum)  
{  
    int i, found = 0, days, rno;  
    float billAmount = 0;  
    for (i = 0; i < count; i++)  
    {  
        if (rooms[i].status == 1 && rooms[i].roomNumber == roomNum)  
        {  
            // rno = rooms[i].roomNumber;  
            found = 1;  
            // getch();  
            break;  
        }  
    }  
    if (found == 1)  
    {  
        cout << "\nEnter Number of Days:\t";  
        cin >> days;  
        billAmount = days * rooms[i].rent;  
  
        cout << "\n\t######## CheckOut Details ########\n";  
        cout << "\nCustomer Name : " << rooms[i].cust.name;  
        cout << "\nRoom Number : " << rooms[i].roomNumber;  
        cout << "\nAddress : " << rooms[i].cust.address;  
        cout << "\nPhone : " << rooms[i].cust.phone;  
        cout << "\nTotal Amount Due : " << billAmount << " /";  
        cout << "\nAdvance Paid: " << rooms[i].cust.payment_advance << " /";  
        cout << "\n*** Total Payable: " << billAmount - rooms[i].cust.payment_advance << "/ only";  
  
        rooms[i].status = 0;  
    }  
    getch();  
}  
The above peace of code is used to generate the bill of a customer.

void manageRooms()  
{  
    class Room room;  
    int opt, rno, i, flag = 0;  
    char ch;  
    do  
    {  
        system("cls");  
        cout << "\n### Manage Rooms ###";  
        cout << "\n1. Add Room";  
        cout << "\n2. Search Room";  
        cout << "\n3. Back to Main Menu";  
        cout << "\n\nEnter Option: ";  
        cin >> opt;  
  
        // switch statement  
        switch (opt)  
        {  
        case 1:  
            cout << "\nEnter Room Number: ";  
            cin >> rno;  
            i = 0;  
            for (i = 0; i < count; i++)  
            {  
                if (rooms[i].roomNumber == rno)  
                {  
                    flag = 1;  
                }  
            }  
            if (flag == 1)  
            {  
                cout << "\nRoom Number is Present.\nPlease enter unique Number";  
                flag = 0;  
                getch();  
            }  
            else  
            {  
                rooms[count] = room.addRoom(rno);  
                count++ ;  
            }  
            break;  
        case 2 :  
            cout <<  " \ n Enter room number :  " ;  
            cin >> rno ;  
            room.searchRoom ( rno ) ;  
            break ;  
        case 3 :  
            // nothing to do  
            Break ;  
        default :  
            cout << " \ n Please Enter correct option " ;  
            break ;  
        }  
    } while ( opt != 3 ) ;  
}  
The above peace of code is used to manage the rooms like, adding rooms or search room or back to menu.

Program for Hotel Management System
#include <iostream>  
#include <string.h>  
#include <conio.h>  
#define max 100  
using namespace std;  
// Class Customer  
class Customer  
{  
public:  
    char name[100];  
    char address[100];  
    char phone[12];  
    char from_date[20];  
    char to_date[20];  
    float payment_advance;  
    int booking_id;  
};  
class Room  
{  
public:  
    char type;  
    char stype;  
    char ac;  
    int roomNumber;  
    int rent;  
    int status;  
  
    class Customer cust;  
    class Room addRoom(int);  
    void searchRoom(int);  
    void deleteRoom(int);  
    void displayRoom(Room);  
};  
  
// Global Declarations  
class Room rooms[max];  
int count = 0;  
  
Room Room::addRoom(int rno)  
{  
    class Room room;  
    room.roomNumber = rno;  
    cout << "\nType AC/Non-AC (A/N) : ";  
    cin >> room.ac;  
    cout << "\nType Comfort (S/N) : ";  
    cin >> room.type;  
    cout << "\nType Size (B/S) : ";  
    cin >> room.stype;  
    cout << "\nDaily Rent : ";  
    cin >> room.rent;  
    room.status = 0;  
  
    cout << "\n Room Added Successfully!";  
    getch();  
    return room;  
}  
void Room::searchRoom(int rno)  
{  